// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"voidspace/users/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockAuthUsecase creates a new instance of MockAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthUsecase {
	mock := &MockAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAuthUsecase is an autogenerated mock type for the AuthUsecase type
type MockAuthUsecase struct {
	mock.Mock
}

type MockAuthUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthUsecase) EXPECT() *MockAuthUsecase_Expecter {
	return &MockAuthUsecase_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockAuthUsecase
func (_mock *MockAuthUsecase) Login(ctx context.Context, credentials string, password string) (*domain.User, error) {
	ret := _mock.Called(ctx, credentials, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, credentials, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, credentials, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, credentials, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - credentials string
//   - password string
func (_e *MockAuthUsecase_Expecter) Login(ctx interface{}, credentials interface{}, password interface{}) *MockAuthUsecase_Login_Call {
	return &MockAuthUsecase_Login_Call{Call: _e.mock.On("Login", ctx, credentials, password)}
}

func (_c *MockAuthUsecase_Login_Call) Run(run func(ctx context.Context, credentials string, password string)) *MockAuthUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAuthUsecase_Login_Call) Return(user *domain.User, err error) *MockAuthUsecase_Login_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthUsecase_Login_Call) RunAndReturn(run func(ctx context.Context, credentials string, password string) (*domain.User, error)) *MockAuthUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function for the type MockAuthUsecase
func (_mock *MockAuthUsecase) Register(ctx context.Context, username string, email string, password string) (*domain.User, error) {
	ret := _mock.Called(ctx, username, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.User, error)); ok {
		return returnFunc(ctx, username, email, password)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.User); ok {
		r0 = returnFunc(ctx, username, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, username, email, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAuthUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
//   - password string
func (_e *MockAuthUsecase_Expecter) Register(ctx interface{}, username interface{}, email interface{}, password interface{}) *MockAuthUsecase_Register_Call {
	return &MockAuthUsecase_Register_Call{Call: _e.mock.On("Register", ctx, username, email, password)}
}

func (_c *MockAuthUsecase_Register_Call) Run(run func(ctx context.Context, username string, email string, password string)) *MockAuthUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockAuthUsecase_Register_Call) Return(user *domain.User, err error) *MockAuthUsecase_Register_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockAuthUsecase_Register_Call) RunAndReturn(run func(ctx context.Context, username string, email string, password string) (*domain.User, error)) *MockAuthUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}
