// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"voidspace/users/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProfileRepository creates a new instance of MockProfileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileRepository {
	mock := &MockProfileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProfileRepository is an autogenerated mock type for the ProfileRepository type
type MockProfileRepository struct {
	mock.Mock
}

type MockProfileRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileRepository) EXPECT() *MockProfileRepository_Expecter {
	return &MockProfileRepository_Expecter{mock: &_m.Mock}
}

// GetProfileById provides a mock function for the type MockProfileRepository
func (_mock *MockProfileRepository) GetProfileById(ctx context.Context, userID int) (*domain.Profile, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileById")
	}

	var r0 *domain.Profile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*domain.Profile, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *domain.Profile); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Profile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProfileRepository_GetProfileById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProfileById'
type MockProfileRepository_GetProfileById_Call struct {
	*mock.Call
}

// GetProfileById is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
func (_e *MockProfileRepository_Expecter) GetProfileById(ctx interface{}, userID interface{}) *MockProfileRepository_GetProfileById_Call {
	return &MockProfileRepository_GetProfileById_Call{Call: _e.mock.On("GetProfileById", ctx, userID)}
}

func (_c *MockProfileRepository_GetProfileById_Call) Run(run func(ctx context.Context, userID int)) *MockProfileRepository_GetProfileById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProfileRepository_GetProfileById_Call) Return(profile *domain.Profile, err error) *MockProfileRepository_GetProfileById_Call {
	_c.Call.Return(profile, err)
	return _c
}

func (_c *MockProfileRepository_GetProfileById_Call) RunAndReturn(run func(ctx context.Context, userID int) (*domain.Profile, error)) *MockProfileRepository_GetProfileById_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProfileRepository
func (_mock *MockProfileRepository) Update(ctx context.Context, userID int, profile *domain.Profile) error {
	ret := _mock.Called(ctx, userID, profile)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *domain.Profile) error); ok {
		r0 = returnFunc(ctx, userID, profile)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProfileRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProfileRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - profile *domain.Profile
func (_e *MockProfileRepository_Expecter) Update(ctx interface{}, userID interface{}, profile interface{}) *MockProfileRepository_Update_Call {
	return &MockProfileRepository_Update_Call{Call: _e.mock.On("Update", ctx, userID, profile)}
}

func (_c *MockProfileRepository_Update_Call) Run(run func(ctx context.Context, userID int, profile *domain.Profile)) *MockProfileRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *domain.Profile
		if args[2] != nil {
			arg2 = args[2].(*domain.Profile)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProfileRepository_Update_Call) Return(err error) *MockProfileRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProfileRepository_Update_Call) RunAndReturn(run func(ctx context.Context, userID int, profile *domain.Profile) error) *MockProfileRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
