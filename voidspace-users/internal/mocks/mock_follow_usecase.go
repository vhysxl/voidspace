// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFollowUsecase creates a new instance of MockFollowUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowUsecase {
	mock := &MockFollowUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFollowUsecase is an autogenerated mock type for the FollowUsecase type
type MockFollowUsecase struct {
	mock.Mock
}

type MockFollowUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowUsecase) EXPECT() *MockFollowUsecase_Expecter {
	return &MockFollowUsecase_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function for the type MockFollowUsecase
func (_mock *MockFollowUsecase) Follow(ctx context.Context, followingID int, username string) error {
	ret := _mock.Called(ctx, followingID, username)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, followingID, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFollowUsecase_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockFollowUsecase_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - followingID int
//   - username string
func (_e *MockFollowUsecase_Expecter) Follow(ctx interface{}, followingID interface{}, username interface{}) *MockFollowUsecase_Follow_Call {
	return &MockFollowUsecase_Follow_Call{Call: _e.mock.On("Follow", ctx, followingID, username)}
}

func (_c *MockFollowUsecase_Follow_Call) Run(run func(ctx context.Context, followingID int, username string)) *MockFollowUsecase_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFollowUsecase_Follow_Call) Return(err error) *MockFollowUsecase_Follow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFollowUsecase_Follow_Call) RunAndReturn(run func(ctx context.Context, followingID int, username string) error) *MockFollowUsecase_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function for the type MockFollowUsecase
func (_mock *MockFollowUsecase) Unfollow(ctx context.Context, followingID int, username string) error {
	ret := _mock.Called(ctx, followingID, username)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = returnFunc(ctx, followingID, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFollowUsecase_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockFollowUsecase_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - followingID int
//   - username string
func (_e *MockFollowUsecase_Expecter) Unfollow(ctx interface{}, followingID interface{}, username interface{}) *MockFollowUsecase_Unfollow_Call {
	return &MockFollowUsecase_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, followingID, username)}
}

func (_c *MockFollowUsecase_Unfollow_Call) Run(run func(ctx context.Context, followingID int, username string)) *MockFollowUsecase_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFollowUsecase_Unfollow_Call) Return(err error) *MockFollowUsecase_Unfollow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFollowUsecase_Unfollow_Call) RunAndReturn(run func(ctx context.Context, followingID int, username string) error) *MockFollowUsecase_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}
