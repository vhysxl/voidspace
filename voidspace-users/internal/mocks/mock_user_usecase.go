// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"voidspace/users/internal/domain/views"

	mock "github.com/stretchr/testify/mock"
)

// NewMockUserUsecase creates a new instance of MockUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUsecase {
	mock := &MockUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserUsecase is an autogenerated mock type for the UserUsecase type
type MockUserUsecase struct {
	mock.Mock
}

type MockUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUsecase) EXPECT() *MockUserUsecase_Expecter {
	return &MockUserUsecase_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type MockUserUsecase
func (_mock *MockUserUsecase) DeleteUser(ctx context.Context, ID int) error {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserUsecase_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserUsecase_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int
func (_e *MockUserUsecase_Expecter) DeleteUser(ctx interface{}, ID interface{}) *MockUserUsecase_DeleteUser_Call {
	return &MockUserUsecase_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, ID)}
}

func (_c *MockUserUsecase_DeleteUser_Call) Run(run func(ctx context.Context, ID int)) *MockUserUsecase_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserUsecase_DeleteUser_Call) Return(err error) *MockUserUsecase_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserUsecase_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, ID int) error) *MockUserUsecase_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetCurrentUser provides a mock function for the type MockUserUsecase
func (_mock *MockUserUsecase) GetCurrentUser(ctx context.Context, ID int) (*views.UserProfile, error) {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *views.UserProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*views.UserProfile, error)); ok {
		return returnFunc(ctx, ID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *views.UserProfile); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.UserProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUsecase_GetCurrentUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentUser'
type MockUserUsecase_GetCurrentUser_Call struct {
	*mock.Call
}

// GetCurrentUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int
func (_e *MockUserUsecase_Expecter) GetCurrentUser(ctx interface{}, ID interface{}) *MockUserUsecase_GetCurrentUser_Call {
	return &MockUserUsecase_GetCurrentUser_Call{Call: _e.mock.On("GetCurrentUser", ctx, ID)}
}

func (_c *MockUserUsecase_GetCurrentUser_Call) Run(run func(ctx context.Context, ID int)) *MockUserUsecase_GetCurrentUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserUsecase_GetCurrentUser_Call) Return(userProfile *views.UserProfile, err error) *MockUserUsecase_GetCurrentUser_Call {
	_c.Call.Return(userProfile, err)
	return _c
}

func (_c *MockUserUsecase_GetCurrentUser_Call) RunAndReturn(run func(ctx context.Context, ID int) (*views.UserProfile, error)) *MockUserUsecase_GetCurrentUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockUserUsecase
func (_mock *MockUserUsecase) GetUser(ctx context.Context, username string) (*views.UserProfile, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *views.UserProfile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*views.UserProfile, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *views.UserProfile); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*views.UserProfile)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserUsecase_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserUsecase_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserUsecase_Expecter) GetUser(ctx interface{}, username interface{}) *MockUserUsecase_GetUser_Call {
	return &MockUserUsecase_GetUser_Call{Call: _e.mock.On("GetUser", ctx, username)}
}

func (_c *MockUserUsecase_GetUser_Call) Run(run func(ctx context.Context, username string)) *MockUserUsecase_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserUsecase_GetUser_Call) Return(userProfile *views.UserProfile, err error) *MockUserUsecase_GetUser_Call {
	_c.Call.Return(userProfile, err)
	return _c
}

func (_c *MockUserUsecase_GetUser_Call) RunAndReturn(run func(ctx context.Context, username string) (*views.UserProfile, error)) *MockUserUsecase_GetUser_Call {
	_c.Call.Return(run)
	return _c
}
