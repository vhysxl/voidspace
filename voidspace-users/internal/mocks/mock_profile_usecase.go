// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"voidspace/users/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockProfileUsecase creates a new instance of MockProfileUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProfileUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProfileUsecase {
	mock := &MockProfileUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProfileUsecase is an autogenerated mock type for the ProfileUsecase type
type MockProfileUsecase struct {
	mock.Mock
}

type MockProfileUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProfileUsecase) EXPECT() *MockProfileUsecase_Expecter {
	return &MockProfileUsecase_Expecter{mock: &_m.Mock}
}

// UpdateProfile provides a mock function for the type MockProfileUsecase
func (_mock *MockProfileUsecase) UpdateProfile(ctx context.Context, userID int, updates *domain.Profile) error {
	ret := _mock.Called(ctx, userID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, *domain.Profile) error); ok {
		r0 = returnFunc(ctx, userID, updates)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProfileUsecase_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockProfileUsecase_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - updates *domain.Profile
func (_e *MockProfileUsecase_Expecter) UpdateProfile(ctx interface{}, userID interface{}, updates interface{}) *MockProfileUsecase_UpdateProfile_Call {
	return &MockProfileUsecase_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, userID, updates)}
}

func (_c *MockProfileUsecase_UpdateProfile_Call) Run(run func(ctx context.Context, userID int, updates *domain.Profile)) *MockProfileUsecase_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 *domain.Profile
		if args[2] != nil {
			arg2 = args[2].(*domain.Profile)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProfileUsecase_UpdateProfile_Call) Return(err error) *MockProfileUsecase_UpdateProfile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProfileUsecase_UpdateProfile_Call) RunAndReturn(run func(ctx context.Context, userID int, updates *domain.Profile) error) *MockProfileUsecase_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}
